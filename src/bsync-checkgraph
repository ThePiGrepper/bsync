#!/bin/bash
#
#
# Usage: $0 input-file <output dir>
#Tests the structure of the build graph on build.sync file in the current repo
#
#It starts by adding all elements in the local build.sync file to the internal table.
#This adding process has two parts:
#A parsing phase: it will cut out comments,empty lines, and unnecessary spaces.
#A translation phase: it will seek the true ID of each version,
#the hash value of the commit, using 'git -C $repo rev-parse $version'.
#
#The main loop goes through the table. Per iteration, it checks if the
#current Node exist "previously" in the table. IT does as follows:
#-The searching method if from the element indexed to the beginning of the table.
#-If it encounters that the Node DOES NOT exist, it adds the content of its
# respective build.sync file to the table using the adding process defined previously.
#-If it encounters that it does exist but the version does not match with the one
# in the table, it aborts operation and sends ERROR.
#-If it matches everything(project and version), it skips it and do nothing else.
#
#if the loop ends, it means that all elements have been read successfully and the graph
#is OK.

add2table()
{
#Read file and preprocess all relevant info. discard everything else.
while IFS= read -r line;do
  #Parse phase
  cline=$(echo "$line" | sed -e "s/[ \t]*#.*//g")
  if [[ $(echo $cline | wc -w) -ge 1 ]]; then
    if [[ $(echo $cline | wc -w) -ge 2 ]]; then
      read repo pversion <<<"$(echo $cline | cut -d ' ' -f1) $(echo $cline | cut -d ' ' -f2)"
      tversion=$(git -C $BSYNCDIR/$repo rev-parse $pversion 2>/dev/null)
      if test $? -ne 0; then
        echo "error:Invalid Node <$repo - $pversion>. abort" >&2
        exit 1
      fi
      #echo $repo $tversion
    else
      read repo tversion <<<"$(echo $cline | cut -d ' ' -f1) local"
      #echo $repo $tversion
    fi
    #Translation Phase
    #Support for single Vault only
    Trepo[$index]=$BSYNCDIR/$repo
    Tver[$index]=$tversion;
    ((index++))
  fi
done <<< "$bs"
return 0
}

declare -a Trepo
declare -a Tver
declare -a skiptable
index=0
#add input file dependencies to Table
bs=$(cat -)
add2table
for ((i=0;i<index;i++)); do
  exists=0
  for ((j=i-1;j>=0;j--)); do
    if test ${Trepo[$j]} == ${Trepo[$i]};then
      if test ${Tver[$j]} == ${Tver[$i]};then
        exists=1
        skiptable[$i]=1;
      else
        echo -e "error:Ambiguous Node (${Trepo[$j]}):\n${Tver[$j]} - ${Tver[$i]}\nabort" >&2
        exit 1
      fi
    fi
  done
  if test $exists -eq 0; then
  #detect if build.sync file exists in its default directories
    if test ${Tver[$i]} == "local"; then
      bs=$(cat ${Trepo[$i]}/build.sync 2>/dev/null) \
      || bs=$(cat ${Trepo[$i]}/src/build.sync 2>/dev/null) \
      && add2table
    else
      bs=$(git -C ${Trepo[$i]} show ${Tver[$i]}:build.sync 2>/dev/null) \
      || bs=$(git -C ${Trepo[$i]} show ${Tver[$i]}:src/build.sync 2>/dev/null) \
      && add2table
    fi
  fi
done
#output to file if $1 is an existing directory
#filename is the sha1 value of the parent node
#overwrites file
if [ -d "$1" ]; then
  rm -rf ${1}/bstemp
  for ((i=0;i<index;i++));do
    if [[ ${skiptable[$i]} -ne 1 ]]; then
      echo "${Trepo[$i]} ${Tver[$i]}" >> ${1}/bstemp
    fi
  done
fi
exit 0
